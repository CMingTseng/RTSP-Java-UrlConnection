 package com.net.rtsp.util;import java.util.EventListener;class QueueThread extends Thread {    private final EventQueue q;    private volatile boolean killed;    public QueueThread(EventQueue q) {        super("QueueThread " + q);        this.q = q;    }    public void kill() {        killed = true;        interrupt();    }    public void run() {        EventQueue q = this.q;	 QueueJob[] jobs;        while (!killed) {             jobs=null;             try {                synchronized (q) {                    while (q.isEmpty()) {                        q.wait();                    }                    jobs = q.dequeueAll();                }                QueueThread.dispatch(jobs);            } catch (InterruptedException ex) {                // ex.printStackTrace();            }        }    }    boolean killed() {        return killed;     }    private static void dispatch(QueueJob[] jobs) {        // in order for jobs        for (int i = 0; i < jobs.length; i++) {            QueueJob job = jobs[i];            EventListener[] list = job.getListeners();            Dispatcher dispatcher = job.getDispatcher();            try {                dispatcher.dispatch(list, job.event);            } catch (Exception ex) {}        }    }}